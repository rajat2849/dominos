import { connect } from 'react-redux';

import Dashboard from '../components/Dashboard';
import {
  getPromotionList,
  getValueDealsList,
  getBannerList,
  mountProductCategoryList,
  splashScreen,
  getChatbotStatus,
  geCustomerOrders,
  getBestSellerList,
  getBestSellerPizzaList,
  getAppExclusiveList,
  getVoucherExclusiveList
} from '../modules/dashboard';
import { applyVoucherCode , setAlertMeassage } from "../../../store/newcart";
import {getUserNearestStore,
  findStore,
  validateUserCurrentAddress,
  getStoreLocation,
  resetStoreLocations,
  resetNearestMarker,
  setAddressDetails
} from "../../../store/findStore";
import { loadingImage } from "../../../store/app";
import { setLanguage } from'redux-i18n';
import {fetchConfig} from "../../NewPromotion/modules/promotion.js";
import { getPizzaList } from '../../Menu/modules/menu';
import {
  fetchSurveyAddress,
  setFormprops,
  setCurrentLocation,
  setAddressByLatLng,
  resetFormprops,
  resetSurveyAddressArray,
  addDeliveryAddress,
  setLoadingFlag,
  resetAlertBox,
  setUserNearestStore,
  setGeoUserAddress,
  setGeoCenterPoint,
  getCustomerDeliveryAddress,
  resetIsSelectedValue
} from "../../NewServiceMethod/modules/servicemethod";
const mapStateToProps = (state) => {
  return({
    isShakeCartIcon: state.cart.isShakeCartIcon,
    lang: state.i18nState.lang,
    app: state.app.app,
    loader: state.app.loader,
    promotionList: state.Dashboard.promotionList,
    valueDealsList: state.Dashboard.valueDealsList,
    fetching : state.Dashboard.fetching,
    configuration:state.Dashboard.configuration,
    bannerList: state.Dashboard.bannerList,
    showProductCategoryComp: state.Dashboard.showProductCategoryComp,
    showSplash: state.Dashboard.showSplash,
    applying: state.myCart.applying,
    alertMessage: state.myCart.alertMessage,
    voucherCodeDetail: state.myCart.voucherCodeDetail,
    showAlert: state.myCart.showAlert,
    alertMessage: state.myCart.alertMessage,
    error: state.myCart.error,
    isBannerFetched : state.Dashboard.isBannerFetched,
    isPromotionFetched : state.Dashboard.isPromotionFetched,
    isValueDealsFetched : state.Dashboard.isValueDealsFetched,
    chatBotData:state.Dashboard.chatBotData,
    ordersCount:state.Dashboard.ordersCount,
    sellerList:state.Dashboard.sellerList,
    appExclusiveList:state.Dashboard.appExclusiveList,
    pizzaList:state.menu.pizzaList,
    storeLocations: state.findStore.storeLocations,
    nearesrStores: state.findStore.nearesrStores,
    nearestMarker: state.findStore.nearestMarker,
    getLocation:state.findStore.getLocation,
    fetchStore:state.findStore.fetchStore,
    userCurrentAreaId: state.findStore.userCurrentAreaId,
    markers: state.findStore.markers,
    fetching: state.findStore.fetching,
    loaderFlag: state.ServiceMethod.loaderFlag,
    fetching: state.findStore.fetching,
    fetchDeliveryAddress: state.ServiceMethod.fetchDeliveryAddress,
    surveyAddress: state.ServiceMethod.surveyAddress,
    deliveryAddress: state.ServiceMethod.deliveryAddress,
    showDeliveryForm: state.ServiceMethod.showDeliveryForm,
    isSelectValue: state.ServiceMethod.isSelectValue,
    selectedValue: state.ServiceMethod.selectedValue,
    error: state.ServiceMethod.error,
    currentLocation: state.ServiceMethod.currentLocation,
    centerPoint: state.ServiceMethod.centerPoint,
    markers: state.findStore.markers,
    userAddress: state.ServiceMethod.userAddress,
    storeDetail: state.ServiceMethod.storeDetail,
    userCurrentAreaId: state.findStore.userCurrentAreaId,
    surveyAddressFetching: state.ServiceMethod.fetching,
    showAlert: state.ServiceMethod.showAlert,
    customerAddress: state.ServiceMethod.customerAddress,
    alertMessage: state.ServiceMethod.alertMessage,
    userAddressHeading: state.ServiceMethod.userAddressHeading,
    showLoader: state.ServiceMethod.showLoader,
    storeList: state.findStore.storeList,
    deliveryAddress: state.findStore.deliveryAddress,
    takeawayAddress: state.findStore.takeawayAddress,
    activeBtn: state.findStore.activeBtn,
  });
};

const mapDispatchToProps = (dispatch) => {
  return({
    loadingImage: (status) => dispatch(loadingImage(status)),
    getPromotionList: () => dispatch(getPromotionList()),
    getValueDealsList: () => dispatch(getValueDealsList()),
    getBannerList: () => dispatch(getBannerList()),
    mountProductCategoryList: (status) => dispatch(mountProductCategoryList(status)),
    setLanguage: (lang) => dispatch(setLanguage(lang)),
    splashScreen: (status) => dispatch(splashScreen(status)),
    applyVoucherCode: (code) => dispatch(applyVoucherCode(code)),
    setAlertMeassage: (status,message) => dispatch(setAlertMeassage(status,message)),
    getChatbotStatus:()=>dispatch(getChatbotStatus()),
    geCustomerOrders:(id) =>dispatch(geCustomerOrders(id)),
    fetchConfig:() =>dispatch(fetchConfig()),
    getBestSellerList:() =>dispatch(getBestSellerList()),
    getBestSellerPizzaList:() => dispatch(getBestSellerPizzaList()),
    getPizzaList:() => dispatch(getPizzaList()),
    getAppExclusiveList: () => dispatch(getAppExclusiveList()),
    getVoucherExclusiveList: () => dispatch(getVoucherExclusiveList()),

    resetSurveyAddressArray: () => dispatch(resetSurveyAddressArray()),
    getUserNearestStore: (lat,lang) => dispatch(getUserNearestStore(lat,lang)),
    getStoreLocation: () => dispatch(getStoreLocation()),
    resetNearestMarker: () => dispatch(resetNearestMarker()),
    resetStoreLocations: () => dispatch(resetStoreLocations()),
    validateUserCurrentAddress: (lat, lng, areaData) => dispatch(validateUserCurrentAddress(lat, lng, areaData)),
    findStore: (lat, lng, areaId,page) => dispatch(findStore(lat, lng, areaId, "delivery")),
    getNearestStores: (lat, lng, areaId,page) => dispatch(findStore(lat, lng, areaId, "storelocator")),
    setAddressByLatLng: (lat, lng) => dispatch(setAddressByLatLng(lat, lng)),
    resetFormprops: () => dispatch(resetFormprops()),
    fetchSurveyAddress: (values) => dispatch(fetchSurveyAddress(values)),
    setFormprops: (values) => dispatch(setFormprops(values)),
    map: (values) => dispatch(map(values)),
    setCurrentLocation: (values) => dispatch(setCurrentLocation(values)),
    addDeliveryAddress: (userSelectedAddress) => dispatch(addDeliveryAddress(userSelectedAddress)),
    setUserNearestStore: (lat, lng,callback,item) => dispatch(setUserNearestStore(lat, lng,callback,item)),
    setLoadingFlag: (status) => dispatch(setLoadingFlag(status)),
    resetAlertBox: (showAlert, message) => dispatch(resetAlertBox(showAlert, message)),
    setGeoUserAddress: (address,addressHeading) => dispatch(setGeoUserAddress(address,addressHeading)),
    setGeoCenterPoint: (centerPoint) => dispatch(setGeoCenterPoint(centerPoint)),
    getCustomerDeliveryAddress: (customer_id) => dispatch(getCustomerDeliveryAddress(customer_id)),
    resetAlertBox: () => dispatch(resetAlertBox()),
    setAddressDetails: (address_details, isActive) => dispatch(setAddressDetails(address_details, isActive))
  });
};

export default connect(mapStateToProps, mapDispatchToProps)(Dashboard);
